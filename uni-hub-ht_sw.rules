var logger = Java.type("org.slf4j.LoggerFactory").getLogger("org.openhab.model.script.Rules.Experiments");
var ZonedDateTime = Java.type("java.time.ZonedDateTime");
//var Things = Java.type("org.openhab.core.model.script.actions.Things");

// offset of Temperature measurement vaisala 0V->0C
// TODO: Wieso global und nicht in Funktion definieren? Muss der nicht updated werden da ev neu referenziert worden ist?
// Constants
var gasConst = 8314.3
var mol = 18.016
var offset = 40
var rooms = 1
var room;
/* Script */
/* -------------------------------------------------------------------------------------------------------------------------------------------------*/
var updateSwitch = new Boolean("false");
this.bool = (this.bool === undefined) ? false:this.bool;
var decimals = 10
if (this.bool){
    decimals = 100;
}

// Check if in all rooms at least one switch is on, if not turn one switch on
for (room = 1; room <= rooms; room++) {
  if (itemRegistry.getItem('unihubRelay1_room' + room).getState() == OFF && itemRegistry.getItem('unihubRelay2_room' + room).getState() == OFF){
      events.sendCommand(('unihubRelay1_room' + room),ON);
      updateSwitch = Boolean("true");
  }
}

// If the number of rooms is low and a update have been proceed, a delay is required to let openhab update the sensor values
if (rooms < 10 && updateSwitch){
  java.lang.Thread.sleep(20000);
}

// Read the first analog input of all rooms
for (room = 1; room <= rooms; room++) {
  if (itemRegistry.getItem('unihubRelay1_room' + room).getState() == ON) {
    readAnalogSensorHumidity(room);
  } else if (itemRegistry.getItem('unihubRelay2_room' + room).getState() == ON) { 
    readAnalogSensorTemperature(room);
  }
}

// If the number of rooms is low a delay is required to let openhab update the sensor values
if (rooms < 10){
  java.lang.Thread.sleep(20000);
}

// Read the second analog input of all rooms
for (room = 1; room <= rooms; room++) {
  if (itemRegistry.getItem('unihubRelay1_room' + room).getState() == ON) {
    readAnalogSensorHumidity(room);
  } else if (itemRegistry.getItem('unihubRelay2_room' + room).getState() == ON) { 
    readAnalogSensorTemperature(room);
  } else {                                                           
    rebootUnihub(room);
  }
}
this.bool = !this.bool;

/* Function declerations*/
/* -------------------------------------------------------------------------------------------------------------------------------------------------*/

/*
Reads the first analog sensor input of the shelly unihub. The analog input will then 
be converted to a humidity in %. Finally, the switch is changed to read the second
analog input. The humidity item is directly updated via post command on openhab with the
converted humidity in this function. 
*/
function readAnalogSensorHumidity(room) {
  last_state = itemRegistry.getItem('unihubADC_room' + room).getState(); // Value of Analog signal (0-3.3V)
  logger.info("Voltage is: " + last_state);
  var airHum = 0;
  if (last_state >= 4.94) {
    airHum = 100;
  }else{
    airHum = last_state / 0.05;
  }
    events.sendCommand(('unihubRelay1_room' + room),OFF);
    events.sendCommand(('unihubRelay2_room' + room),ON);
    events.postUpdate(("humidity_room" + room), airHum);
}

/*
Reads the second analog sensor input of the shelly unihub. The analog input will then 
be converted to a temperature in Â°C. Finally, the switch is changed to read the second
analog input.  The temperatur item is directly updated via post command on openhab with the
converted temperatur in this function. 
*/
function readAnalogSensorTemperature(room) {
  last_state = itemRegistry.getItem('unihubADC_room' + room).getState(); // Value of Analog signal (0-3.3V)
  logger.info("Voltage is: " + last_state);
  var airTemp = 0;
  var n = 0;
  if (last_state > 5){
    airTemp = 100;
  }else{
    n = last_state / 0.04166 - offset;
    airTemp = Math.round(n * decimals) / decimals;
  }
    events.sendCommand(('unihubRelay2_room' + room),OFF);
    events.sendCommand(('unihubRelay1_room' + room),ON);
    events.postUpdate(("temperature_room" + room), airTemp);
}

/*
Reboot the shelly unihub. 
*/
function rebootUnihub(room){
  var IpAdress = "192.168.250.71";
  //var HttpUtil = Java.type("org.openhab.core.io.net.http.HttpUtil");
  var success = new Boolean("false");
  //success = sendHttpPostRequest("192.168.250.71/reboot", "application/json", {}, 3000);
  if (success){
      logger.info("Thing " + 'unihub_room' + room + " is " + "rebooted");
    } else { 
      logger.info("Thing " + 'unihub_room' + room + " is " + "offline");
    }
}

/*
Calculate plant relevant climate values based on https://pulsegrow.com/blogs/learn/vpd
Future implementation of VPD (difference between VPmeristem and VProom based on https://vpdchart.com/
*/

function calculateVPD(room){
var meristemTemp = itemRegistry.getItem('unihubT2_room' + room).getState()
var SVP = 610.78 * (10 ** (7.5 * meristemTemp / (meristemTemp + 237.3))); //saturation vapore pressure of plant in pascal
var airSVP = 610.78 * (10 ** (7.5 * airTemp / (airTemp + 237.3))); //saturation vapore pressure of plant in pascal
var VP = SVP * (1 - airHum / 100); // Vapore pressure of plant
var VPD = airSVP * (1 - airHum / 100) - VP;
events.postUpdate(("vpd_room" + room), VPD);
}

/* -------------------------------------------------------------------------------------------------------------------------------------------------*/
