var logger = Java.type("org.slf4j.LoggerFactory").getLogger("org.openhab.model.script.Rules.Experiments");
var ZonedDateTime = Java.type("java.time.ZonedDateTime");
var HttpUtil        = Java.type("org.openhab.core.io.net.http.HttpUtil");

var last_state;
var measurement;
var offset = 40;
var humidity;
var temperature;
var reference_temperature;
var success;
var IpAdress = "192.168.0.";

var n = 15; // number of uni-hubs
var t; // task 0 humidity task 1 temp task


for (t=0;t<1;t++){
    for (i=1;i<n;i++){
        last_state = itemRegistry.getItem('unihubADC_room' + i).getState(); // Value of Analog signal (0-5V) validate and if NULL t++
        if (itemRegistry.getItem('unihubRelay1_room' + i).getState() == ON) { // Get relay state Uni-Hub ( channel relay1= Humidity input of Vaisala)
            humidity = last_state / 0.05 ;
            events.sendCommand(('unihubRelay1_room' + i),OFF);
            events.sendCommand(('unihubRelay2_room' + i),ON);
            events.postUpdate(("humidity_room" + n), humidity)
        } else if (itemRegistry.getItem('unihubRelay2_room' + i).getState() == ON) { // Get relay state Uni-Hub (input channel relay1= Temperature input of Vaisala)
            temperature = (last_state / 0.04166) - offset;
            events.sendCommand(('unihubRelay2_room' + n),OFF);
            events.sendCommand(('unihubRelay1_room' + n),ON);
            events.postUpdate(("temperature_room" + i), temperature)
        } else {                                                           // check if uni hub is online and if not send message / debug
            success = HttpUtil.executeUrl("GET", IpAdress + n + '/reboot',500);
            if (success = FALSE){
            logger.info("Thing " + 'unihub_room' + n + " is " + offline;
            } else { 
            logger.info("Thing " + 'unihub_room' + n + " is " + rebooted;
            }
         }
    }
 }
